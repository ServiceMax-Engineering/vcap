#!/bin/bash
#Make sure HOME and USER are set: with monit as a daemon it is not set.
[ -z "$HOME" ] && export HOME=/home/<%= node[:deployment][:user] %>
[ -z "$USER" ] && export USER=<%= node[:deployment][:user] %>
[ -z "$TERM" ] && export TERM=xterm
CLOUD_FOUNDRY_HOME=<%= node[:cloudfoundry][:home] %>
CLOUD_FOUNDRY_VCAP_PATH=<%= node[:cloudfoundry][:path] %>
CLOUD_FOUNDRY_DEPLOYMENT_NAME=<%= node[:deployment][:name] %>

_vcap_log=<%= node[:deployment][:log_path] %>/vcap.log
#don't log status calls:
[ "$1" == "status" ] && _vcap_log=/dev/null
echo `date +%Y-%m-%d-%H%M%S`" vcap called with $@" | tee -a $_vcap_log

# check that the network is correctly setup on this VM: at least one IP that is not the local loop:
ip=`/sbin/ifconfig | grep "inet addr" | grep -v "127.0.0.1" | awk '{ print $2 }' | awk -F: '{ print $2 }'`
if [ -z "$ip" ]; then
  echo "Cloudfoundry cannot start: No network is available." >> $_vcap_log
  exit 1
fi

# make sure avahi is publishing the aliases if avahi-publishaliases is installed
[ -f /usr/bin/avahi-publish-aliases -a ! -f /tmp/avahi-publish-alias.pid ] && /usr/bin/avahi-publish-aliases

# Make sure the binaries for this vcap runtime are ready:
if [ -z "$CLOUD_FOUNDRY_CONFIG_PATH" ]; then
#  echo "sourcing the cloudfoundry deployment local" | tee -a $_vcap_log
  source $HOME/.cloudfoundry_deployment_local
fi

# reconfigure the urls eventually
if [ "$2" == "dea" -a "$1" != "stop" ]; then
  do_reconfig="true"
elif [ -z "$2" ]; then
  [ "$1" == "restart" ] && do_reconfig="true"
  [ "$1" == "start" ] && do_reconfig="true"
fi
if [ "$do_reconfig" == "true" ]; then
  [ -f /etc/init.d/nginx_router ] && nginx_path=/etc/init.d/nginx_router || nginx_path=/etc/init.d/nginx
  if [ -f "$nginx_path" ]; then
    sudo $nginx_path status
    if [ "$?" != "0" ]; then
      echo "Fixing nginx script and starting nginx"
      sudo sed -i 's/[[:space:]]*echo -n "Starting/#this line prevents the startup at boot time on 12.04           echo -n "Starting/' $nginx_path
       sudo sed -i 's/[[:space:]]*log_action_begin_msg "Starting/#this line prevents the startup at boot time on 12.04           log_action_begin_msg "Starting/' $nginx_path
      sudo $nginx_path start
    fi
  fi
  # plug your own apps here:
  # call the registration app if there is such a thing it will take care of the dns gateway bind
  if [ -f "/home/ubuntu/intalio/registration_app/start_register_app.rb" ]; then
     cd /home/ubuntu/intalio/registration_app
     [ -z "$RUBYOPT" ] && export RUBYOPT="rubygems"
     ruby start_register_app.rb >> $_vcap_log 2>&1 # | tee -a $_vcap_log # can't redirect
  fi

  if [ -d "/etc/issue.d/volatile.d" ]; then
     # Don't override the Please Register
     please_register=`grep Please /etc/issue`
     [ -z "$please_register" ] && echo "Application starting... This may take a few minutes." > /etc/issue.d/volatile.d/K50_applications_status
  fi

  # this is called before the apps are started and after the cloud_controller is started
  # let's make sure that the applications are correctly configured with their url
  cd /home/ubuntu
  echo "calling vmc_knife to make sure the urls are up to date." | tee -a $_vcap_log
  $CLOUD_FOUNDRY_VCAP_PATH/dev_setup/bin/vcap_dev --name $CLOUD_FOUNDRY_DEPLOYMENT_NAME --dir $CLOUD_FOUNDRY_HOME start cloud_controller | tee -a $_vcap_log
  $CLOUD_FOUNDRY_VCAP_PATH/dev_setup/bin/vcap_dev --name $CLOUD_FOUNDRY_DEPLOYMENT_NAME --dir $CLOUD_FOUNDRY_HOME start router | tee -a $_vcap_log
  # wait until cloud_controller is indeed available:
  COUNTER=0
  while [  $COUNTER -lt 20 ]; do
    ready=`wget -SO- -T 1 -t 1 http://api.intalio.priv:9022 2>&1 | grep "200 OK"`
    if [ -n "$ready" ]; then
      COUNTER=40
      [ COUNTER != "0" ] && echo "Cloud Controller is available"
    else
      echo "[ $COUNTER ] Cloud controller is not available yet."
      let COUNTER=COUNTER+1
      sleep 5
    fi
  done
  if [ -z "$ready" ]; then
    echo "Cloud controller failed to start"
    exit 1
  fi
	if [ -z "$VMC_KNIFE_DONT_RECONFIGURE" ]; then
	  vmc_knife configure-applications | tee -a $_vcap_log
    vmc_knife configure-vcap-etc-hosts | tee -a $_vcap_log
	fi
fi

#call vcap with the cmd-line args:
$CLOUD_FOUNDRY_VCAP_PATH/dev_setup/bin/vcap_dev --name $CLOUD_FOUNDRY_DEPLOYMENT_NAME --dir $CLOUD_FOUNDRY_HOME $@ | tee -a $_vcap_log

if [ "$2" == "cloud_controller" ]; then
if [ "$1" == "start" -o "$1" == "restart" ]; then
  # wait until cloud_controller is indeed available:
  COUNTER=0
  while [  $COUNTER -lt 20 ]; do
    ready=`wget -SO- -T 1 -t 1 http://api.intalio.priv:9022 2>&1 | grep "200 OK"`
    if [ -n "$ready" ]; then
      COUNTER=40
      [ COUNTER != "0" ] && echo "Cloud Controller is available"
    else
      echo "[ $COUNTER ] Cloud controller is not available yet."
      still_running=`$CLOUD_FOUNDRY_VCAP_PATH/dev_setup/bin/vcap_dev --name $CLOUD_FOUNDRY_DEPLOYMENT_NAME --dir $CLOUD_FOUNDRY_HOME status cloud_controller | grep RUNNING`
      if [ -z "$still_running" ]; then
        echo `$CLOUD_FOUNDRY_VCAP_PATH/dev_setup/bin/vcap_dev --name $CLOUD_FOUNDRY_DEPLOYMENT_NAME --dir $CLOUD_FOUNDRY_HOME status cloud_controller | grep STOPPED`
        exit 4
      fi
      let COUNTER=COUNTER+1
      sleep 5
    fi
  done
  if [ -z "$ready" ]; then
    echo "Cloud controller failed to start"
    exit 1
  fi
fi
fi

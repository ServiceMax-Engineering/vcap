user www-data;
worker_processes  1;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
    worker_connections  <%= node[:nginx][:worker_connections] %>;
    use epoll;
    # multi_accept on;
}

http {
    include     /etc/nginx/mime.types;

#    log_format main  '$host - [$time_local] '
#                     '"$request" $status $bytes_sent '
#                     '"$http_referer" "$http_user_agent" '
#                     '$remote_addr response_time:$upstream_response_time';
    # this match the usual apache combined log format to which the upstream response time is appended.
    # it is easier to parse for monitoring and metrics purpose than a custom format.
    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    #'"$http_referer" "$http_user_agent"';
                    '"$http_referer" "$http_user_agent" "$host" response_time:$upstream_response_time';

    access_log  /var/log/nginx/access.log;

    default_type  text/html;

    sendfile           on;
    tcp_nopush         on;
    tcp_nodelay        on;

    keepalive_timeout  75 20;

    gzip  on;
    gzip_min_length    1250;
    gzip_buffers       16 8k;
    gzip_comp_level    2;
    gzip_proxied       any;
    gzip_types         text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_vary          on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    client_max_body_size <%= node[:nginx][:client_max_body_size] %>;
    types_hash_max_size 8192;

    upstream router {
        server  unix:/tmp/router.sock;
    }

    upstream router_status {
        server 127.0.0.1:8080;
    }

    server {
        # use chunkin-http
        chunkin on;
        error_page 411 = @my_411_error;
        location @my_411_error {
            chunkin_resume;
        }
        # end of http-chunkin

        listen       *:80;
        server_name  _;

        #access_log   <%= node[:nginx][:vcap_log] %> main;
        server_name_in_redirect off;

        location /nginx {
                autoindex    on;
                root   /var/www;
                expires     max;
        }
        # Make sure there is a /var/www/nginx/404/404.html page
        error_page  404  /nginx/404/404.html;

        location / {
            proxy_buffering                 off;
            proxy_set_header                Host $host;
            proxy_set_header                X-Real_IP $remote_addr;
            proxy_set_header                X-Forwarded_For $proxy_add_x_forwarded_for;
            proxy_set_header                X-Forwarded_Proto http;
            proxy_redirect                  off;
            proxy_connect_timeout           <%= node[:nginx][:proxy_connect_timeout] %>;
            proxy_send_timeout              <%= node[:nginx][:proxy_send_timeout] %>;
            proxy_read_timeout              <%= node[:nginx][:proxy_read_timeout] %>;
            if ($http_user_agent = "HTTP-Monitor/1.1") {
                set $health_monitor T;
            }
            if ($http_host = "") {
                set $health_monitor "${health_monitor}T";
            }
            if ($health_monitor = TT) {
                more_set_input_headers "Authorization: Basic NjgxMzdlZmVhMWJmNjgwMDpjMDk4MjBkYjdlOWQ4NzU3";
                rewrite ^.*$ /healthz break;
                proxy_pass                    http://router_status;
            }
            proxy_pass                      http://router;
        }
    }

    server {
        # use chunkin-http
        chunkin on;
        error_page 411 = @my_411_error;
        location @my_411_error {
          chunkin_resume;
        }
        # end of http-chunkin

        listen      443;
        ssl         on;
        ssl_certificate <%= node[:nginx][:ssl][:config_dir] %>/<%= node[:nginx][:ssl][:basename] %>.crt;
        ssl_certificate_key <%= node[:nginx][:ssl][:config_dir] %>/<%= node[:nginx][:ssl][:basename] %>.key;
        server_name _
        server_name_in_redirect off;

        location /nginx {
            autoindex    on;
            root   /var/www;
            expires     max;
        }
        # Make sure there is a /var/www/nginx/404/404.html page
        error_page  404  /nginx/404/404.html;

        location / {
            proxy_buffering             off;
            proxy_set_header            Host $host;
            proxy_set_header            X-Real_IP $remote_addr;
            proxy_set_header            X-Forwarded_For $proxy_add_x_forwarded_for;
            proxy_redirect              off;
            proxy_connect_timeout           <%= node[:nginx][:proxy_connect_timeout] %>;
            proxy_send_timeout              <%= node[:nginx][:proxy_send_timeout] %>;
            proxy_read_timeout              <%= node[:nginx][:proxy_read_timeout] %>;

            if ($http_user_agent = "HTTP-Monitor/1.1") {
                set $health_monitor T;
            }
            if ($http_host = "") {
                set $health_monitor "${health_monitor}T";
            }
            if ($health_monitor = TT) {
                more_set_input_headers "Authorization: Basic NjgxMzdlZmVhMWJmNjgwMDpjMDk4MjBkYjdlOWQ4NzU3";
                rewrite ^.*$ /healthz break;
                proxy_pass                 http://router_status;
            }

            proxy_pass                   http://router;
        }
    }


}
